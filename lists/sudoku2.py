def sudoku2(grid):
    # Validating rows
    for row in grid:
        row_numbers = remove_dots(row)
        if not is_valid(row_numbers):
            return False
            
    # Validating cols
    for index in range(len(grid)):
        col = list(map(lambda x: x[index], grid))
        col_numbers = remove_dots(col)
        if not is_valid(col_numbers):
            return False
    
    # Validating 3x3 matrix
    grid_size = 3
    grid_count = len(grid) // grid_size
    for row_index in range(grid_count):
        row_start = grid_size * row_index
        row_end = grid_size * (row_index + 1)
        
        for col_index in range(grid_count):
            col_start = grid_size * col_index
            col_end = grid_size * (col_index + 1)
            
            cell = [grid[r][c] for r in range(row_start, row_end) for c in range(col_start, col_end)]
            cell_numbers = remove_dots(cell)
            if not is_valid(cell_numbers):
                return False
            
    return True
    
def is_valid(sudoku_list):
    return len(sudoku_list) == len(set(sudoku_list))
    
def remove_dots(sudoku_list):
    return [item for item in sudoku_list if item != '.']

print(sudoku2([[".",".",".","1","4",".",".","2","."], 
 [".",".","6",".",".",".",".",".","."], 
 [".",".",".",".",".",".",".",".","."], 
 [".",".","1",".",".",".",".",".","."], 
 [".","6","7",".",".",".",".",".","9"], 
 [".",".",".",".",".",".","8","1","."], 
 [".","3",".",".",".",".",".",".","6"], 
 [".",".",".",".",".","7",".",".","."], 
 [".",".",".","5",".",".",".","7","."]]))
print(sudoku2([[".",".",".",".",".",".",".",".","2"], 
 [".",".",".",".",".",".","6",".","."], 
 [".",".","1","4",".",".","8",".","."], 
 [".",".",".",".",".",".",".",".","."], 
 [".",".",".",".",".",".",".",".","."], 
 [".",".",".",".","3",".",".",".","."], 
 ["5",".","8","6",".",".",".",".","."], 
 [".","9",".",".",".",".","4",".","."], 
 [".",".",".",".","5",".",".",".","."]]))
print(sudoku2([[".","9",".",".","4",".",".",".","."], 
 ["1",".",".",".",".",".","6",".","."], 
 [".",".","3",".",".",".",".",".","."], 
 [".",".",".",".",".",".",".",".","."], 
 [".",".",".","7",".",".",".",".","."], 
 ["3",".",".",".","5",".",".",".","."], 
 [".",".","7",".",".","4",".",".","."], 
 [".",".",".",".",".",".",".",".","."], 
 [".",".",".",".","7",".",".",".","."]]))
print(sudoku2([[".",".",".",".","8",".",".",".","."], 
 [".",".",".",".",".",".","5",".","."], 
 [".",".",".",".","4",".",".","2","."], 
 [".",".",".","3",".","9",".",".","."], 
 [".",".","1","8",".",".","9",".","."], 
 [".",".",".",".",".","5","1",".","."], 
 [".",".","3",".",".","8",".",".","."], 
 [".","1","2",".","3",".",".",".","."], 
 [".",".",".",".",".","7",".",".","1"]]))
print(sudoku2([[".",".",".",".",".",".",".",".","."], 
 [".",".","2",".",".",".",".",".","."], 
 [".",".",".",".",".","2","7","1","."], 
 [".",".",".",".",".",".",".",".","."], 
 [".","2",".",".",".",".",".",".","."], 
 [".","5",".",".",".",".",".",".","."], 
 [".",".",".",".","9",".",".",".","8"], 
 [".",".",".",".",".","1","6",".","."], 
 [".",".",".",".","6",".",".",".","."]]))
